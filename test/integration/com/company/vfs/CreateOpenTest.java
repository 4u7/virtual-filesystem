package com.company.vfs;

import com.company.vfs.exception.FileFormatException;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedWriter;
import java.nio.file.*;

import static com.company.vfs.Utils.*;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

public class CreateOpenTest {

    @Before
    public void setUp() throws Exception {
        VirtualFileSystem.create(FILESYSTEM_FILENAME)
                .maxBlocks(1024)
                .maxEntries(1024)
                .build();
    }

    @Test
    public void open() throws Exception {
        VirtualFileSystem fs = VirtualFileSystem.open(Utils.FILESYSTEM_FILENAME);
        assertThat(fs.getMaxBlocks(), is(1024));
        assertThat(fs.getBlockCount(), is(0));
        assertThat(fs.getMaxEntries(), is(1024));
        assertThat(fs.getEntriesCount(), is(1));
    }

    @Test(expected = NoSuchFileException.class)
    public void openShouldThrow_When_FileIsNotExist() throws Exception {
        VirtualFileSystem.open("nothing");
    }

    @Test(expected = FileFormatException.class)
    public void openShouldThrow_When_FileFormatIsInvalid() throws Exception {
        Path path = Paths.get("somefile");
        try(BufferedWriter writer = Files.newBufferedWriter(path)) {
            writer.write("Something invalid! zxcvbnm,.qwertyuio");
            writer.flush();

            VirtualFileSystem.open("somefile");
        }
        finally {
            if(Files.exists(path)) {
                Files.delete(path);
            }
        }
    }

    @Test(expected = FileAlreadyExistsException.class)
    public void buildShouldThrow_When_FileAlreadyExists() throws Exception {
        Path path = Paths.get("somefile");
        try {
            Files.createFile(path);
            VirtualFileSystem.create("somefile").build();
        }
        finally {
            if(Files.exists(path)) {
                Files.delete(path);
            }
        }
    }

    @After
    public void tearDown() throws Exception {
        removeFilesystemFile();
    }

}